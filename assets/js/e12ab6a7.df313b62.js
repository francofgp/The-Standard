"use strict";(self.webpackChunkthe_standard=self.webpackChunkthe_standard||[]).push([[274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||s;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var l=2;l<s;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const s={},i="3 Exposers",a={unversionedId:"Exposers/Exposers",id:"Exposers/Exposers",title:"3 Exposers",description:"3.0 Introduction",source:"@site/docs/3. Exposers/3. Exposers.md",sourceDirName:"3. Exposers",slug:"/Exposers/",permalink:"/The-Standard/docs/Exposers/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/3. Exposers/3. Exposers.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2.4 Aggregation Services (The Knot)",permalink:"/The-Standard/docs/Services/2.4 Aggregations/"},next:{title:"3.1 Communication Protocols",permalink:"/The-Standard/docs/Exposers/3.1 Communication Protocols/"}},c={},l=[{value:"3.0 Introduction",id:"30-introduction",level:2},{value:"3.0.0 Purpose",id:"300-purpose",level:2},{value:"3.0.0.0 Pure Mapping",id:"3000-pure-mapping",level:3},{value:"3.0.1 Types of Exposure Components",id:"301-types-of-exposure-components",level:2},{value:"3.0.1.0 Communication Protocols",id:"3010-communication-protocols",level:3},{value:"3.0.1.1 User Interfaces",id:"3011-user-interfaces",level:3},{value:"3.0.1.2 I/O Components",id:"3012-io-components",level:3},{value:"3.0.2 Single Point of Contact",id:"302-single-point-of-contact",level:2},{value:"3.0.3 Examples",id:"303-examples",level:2},{value:"3.0.4 Summary",id:"304-summary",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"3-exposers"},"3 Exposers"),(0,r.kt)("h2",{id:"30-introduction"},"3.0 Introduction"),(0,r.kt)("p",null,"Exposers are disposable components in any system that has the single responsibility of exposing your core business logic functionality by mapping its responses to a certain protocol. For instance, in RESTful communications, an API controller would be responsible for returning a ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," code for a successful response. The same thing applies to other protocols such as gRPC or SOAP or any other protocol of communication between distributed systems."),(0,r.kt)("p",null,"Exposer components are similar to Brokers. They are the last point of contact between the core business logic and the outside world. They are built with the intent that they will be detached from the current system at some point in time to allow the very same core logic to integrate with modern systems, protocols or interfaces."),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("img",{src:"https://user-images.githubusercontent.com/1453985/147638000-d0896f11-4117-476a-9f22-43d2b5a7d732.png"})),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"300-purpose"},"3.0.0 Purpose"),(0,r.kt)("p",null,"In general, exposure components main responsibility is to allow someone or something to interact with your business logic. In that core purpose a precise mapping bit by bit to every possible response from your core business logic should be communicated cautiously with the consumer to that logic. I say cautiously because sometimes certain internal issues in the system are not required to be exposed to the outside world. This mapping of responses can usually be a zero effort as the protocol and the language your code business logic communicate are the same such as the case with libraries produced to run on the system that use the same technologies or programming languages."),(0,r.kt)("p",null,"But there are occassions where the outside world stateless protocol doesn't necessarily match the same value of a response. In which case it becomes an exposer component responsibility to make a successful mapping both ways in and out of the system. API controllers are a great example of that. They will communicate a ",(0,r.kt)("inlineCode",{parentName:"p"},"4xx")," issue when there's a validation exception of some type and return a deserialized JSON value if the communication was successful. But there are also more details around problem details, error codes and other levels of mapping and communication that we will discuss in upcoming chapters within this section."),(0,r.kt)("h3",{id:"3000-pure-mapping"},"3.0.0.0 Pure Mapping"),(0,r.kt)("p",null,"The most important aspect of exposure components is that they are not allowed to communicate with brokers of any type. And they are not allowed to contain any form of business logic within them. By business logic here I mean no sequence of routine calls, no iteration or selection/decision making. The same way it is with brokers, they only link an existing realm with the outside realm to achieve a certain value."),(0,r.kt)("h2",{id:"301-types-of-exposure-components"},"3.0.1 Types of Exposure Components"),(0,r.kt)("p",null,"Exposure components have three different types. Which are either communication protocols, user interfaces or simply an IO routine. Let's talk about those breifly."),(0,r.kt)("h3",{id:"3010-communication-protocols"},"3.0.1.0 Communication Protocols"),(0,r.kt)("p",null,"An exposure component that is a communication protocol can vary from simple RESTful APIs, to SOAP communication or gRPC. They can also be a simple client in a library where consumers would just install the library in their projects and consume your core logic through the client APIs. These examples are all of the same type of exposure components."),(0,r.kt)("p",null,"The differentiator here is that a communication protocol is usually event-based. Triggered by an incoming communication and treated with a response of any kind. Communication protocols are usually for system-to-system integrations but they can be accessible and understandble by humans for testing and debugging purposes."),(0,r.kt)("h3",{id:"3011-user-interfaces"},"3.0.1.1 User Interfaces"),(0,r.kt)("p",null,"Another type of exposer components are user interfaces. This can vary from Web, mobile or desktop applications including simple command lines. They mainly target end-users for communication but can be automated by other systems. Especially with command line user interfaces.In this day and age, user interfaces can also include virtual and augmented realities, metaverses and any other form of software."),(0,r.kt)("p",null,"There are occasions where Human-Machine-Interfaces (HMI) can also fall into that level of exposure components. For instance, the buttons on a cellphone, keyboards we use everyday and any form of hardware that can interact directly with core business logic interfaces as an exposure component. The same theory applies to the Internet of Things (IoT) components and many others where a human has to utilize a component to leverage a certain capability to their own advantage in anyway."),(0,r.kt)("h3",{id:"3012-io-components"},"3.0.1.2 I/O Components"),(0,r.kt)("p",null,"Some exposure components are not necessarily a system interfacing with another system. Neither they are purposed to communicate with humans. They are daemons or IO based components that do something in the background without a trigger. usually these components are time-based and they may leverage existing protocols or just simply interface directly with the core business logic which are both viable options."),(0,r.kt)("h2",{id:"302-single-point-of-contact"},"3.0.2 Single Point of Contact"),(0,r.kt)("p",null,"Exposure components are only allowed to communicate with one and only one service. Integrating with multiple services would turn an exposure component into either orchestration or aggregation services which are both not allowed to exist as core logic in that realm of exposure."),(0,r.kt)("p",null,"The single point of contact rule also ensures the ease of disposability of the exposure component itself. It ensures the integration is simple and single-purposed enough with controlled dependencies (only one) that it can be rewired to virtually any protocol at any point in time with the least cost possible."),(0,r.kt)("h2",{id:"303-examples"},"3.0.3 Examples"),(0,r.kt)("p",null,"Let's take API controllers as an example for a real-world exposure component in any given system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"\n[HttpPost]\npublic async ValueTask<ActionResult<Student>> PostStudentAsync(Student student)\n{\n    try\n    {\n        Student registeredStudent =\n            await this.studentService.RegisterStudentAsync(student);\n\n        return Created(registeredStudent);\n    }\n    catch (StudentValidationException studentValidationException)\n        when (studentValidationException.InnerException is AlreadyExistsStudentException)\n    {\n        return Conflict(studentValidationException.InnerException);\n    }\n    catch (StudentValidationException studentValidationException)\n    {\n        return BadRequest(studentValidationException.InnerException);\n    }\n    catch (StudentDependencyException studentDependencyException)\n    {\n        return InternalServerError(studentDependencyException);\n    }\n    catch (StudentServiceException studentServiceException)\n    {\n        return InternalServerError(studentServiceException);\n    }\n}\n\n")),(0,r.kt)("p",null,"The code snippet above is for an API method that ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," a student model into the core business logic of a schooling system (OtripleS). In a technology like ASP.NET, controllers take care of handling mapping incoming JSON request into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Student")," model so the controller can utilize that model with an integrated system."),(0,r.kt)("p",null,"However, you will also see the controller code tries to map every possible categorical exception into it's respective REST protocol. This is just a simple snippet to show what an exposure component may look like. But we will talk more about the rules and conditions for controllers in the next chapter in The Standard."),(0,r.kt)("h2",{id:"304-summary"},"3.0.4 Summary"),(0,r.kt)("p",null,"In summary, exposure components are very thin layer that doesn't contain any intelligence or logic in it. it is not meant to orchestrate, or call multiple core business logic services. And it only focuses on the duplex mapping aspect of the communication between one system and another."))}u.isMDXComponent=!0}}]);