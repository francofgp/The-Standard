"use strict";(self.webpackChunkthe_standard=self.webpackChunkthe_standard||[]).push([[4145],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(n),d=o,m=h["".concat(l,".").concat(d)]||h[d]||p[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4500:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},i="1 Brokers",s={unversionedId:"Brokers/Brokers",id:"Brokers/Brokers",title:"1 Brokers",description:"1.0 Introduction",source:"@site/docs/1. Brokers/1. Brokers.md",sourceDirName:"1. Brokers",slug:"/Brokers/",permalink:"/The-Standard/docs/Brokers/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/1. Brokers/1. Brokers.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"0.2 Principles",permalink:"/The-Standard/docs/Introduction/0.2 Principles"},next:{title:"2 Services",permalink:"/The-Standard/docs/Services/"}},l={},c=[{value:"1.0 Introduction",id:"10-introduction",level:2},{value:"1.1 On The Map",id:"11-on-the-map",level:2},{value:"1.2 Characteristics",id:"12-characteristics",level:2},{value:"1.2.0 Implements a Local Interface",id:"120-implements-a-local-interface",level:3},{value:"1.2.1 No Flow Control",id:"121-no-flow-control",level:3},{value:"1.2.2 No Exception Handling",id:"122-no-exception-handling",level:3},{value:"1.2.3 Own Their Configurations",id:"123-own-their-configurations",level:3},{value:"1.2.4 Natives from Primitives",id:"124-natives-from-primitives",level:3},{value:"1.2.5 Naming Conventions",id:"125-naming-conventions",level:3},{value:"1.2.6 Language",id:"126-language",level:3},{value:"1.2.7 Up &amp; Sideways",id:"127-up--sideways",level:3},{value:"1.3 Organization",id:"13-organization",level:2},{value:"1.4 Broker Types",id:"14-broker-types",level:2},{value:"1.4.0 Entity Brokers",id:"140-entity-brokers",level:3},{value:"1.4.1 Support Brokers",id:"141-support-brokers",level:3},{value:"1.5 Implementation",id:"15-implementation",level:2},{value:"For IStorageBroker.cs:",id:"for-istoragebrokercs",level:6},{value:"For StorageBroker.cs:",id:"for-storagebrokercs",level:6},{value:"For IStorageBroker.Students.cs:",id:"for-istoragebrokerstudentscs",level:6},{value:"For StorageBroker.Students.cs:",id:"for-storagebrokerstudentscs",level:6},{value:"1.6 Summary",id:"16-summary",level:2},{value:"1.7 FAQs",id:"17-faqs",level:2},{value:"1.7.0 Is the brokers pattern the same as the repository pattern?",id:"170-is-the-brokers-pattern-the-same-as-the-repository-pattern",level:4},{value:"1.7.1 Why can&#39;t the brokers implement a contract for methods that return an interface instead of a concrete model?",id:"171-why-cant-the-brokers-implement-a-contract-for-methods-that-return-an-interface-instead-of-a-concrete-model",level:4},{value:"1.7.2 If brokers were truly a layer of abstraction from the business logic, how come we allow external exceptions to leak through them onto the services layer?",id:"172-if-brokers-were-truly-a-layer-of-abstraction-from-the-business-logic-how-come-we-allow-external-exceptions-to-leak-through-them-onto-the-services-layer",level:4},{value:"1.7.3 Why do we use partial classes for brokers who handle multiple entities?",id:"173-why-do-we-use-partial-classes-for-brokers-who-handle-multiple-entities",level:4},{value:"1.7.4 Are brokers the same as providers (Provider Pattern)?",id:"174-are-brokers-the-same-as-providers-provider-pattern",level:4}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"1-brokers"},"1 Brokers"),(0,o.kt)("h2",{id:"10-introduction"},"1.0 Introduction"),(0,o.kt)("p",null,"Brokers play the role of a liaison between the business logic and the outside world.\nThey are wrappers around any external libraries, resources, services or APIs to satisfy a local interface for the business to interact with these resources without having to be tightly coupled with any particular resources or external library implementation."),(0,o.kt)("p",null,"Brokers in general are meant to be disposable and replaceable - they are built with the understanding that technology evolves and changes all the time and therefore they shall be at some point in time in the lifecycle of a given application be replaced with a modern technology that gets the job done faster."),(0,o.kt)("p",null,"But Brokers also ensure that your business is pluggable by abstracting away any specific external resource dependencies from what your software is actually trying to accomplish."),(0,o.kt)("p",null,"For instance, let's say you have an API that was built to consume and serve data from a SQL server. At some point in time, you decided that a better more economical option for your API is to rely on a NoSql technology instead. Having a broker to abstract away the dependency on SQL will make it so much easier to simply integrate with NoSql with the least time and cost humanly possible."),(0,o.kt)("h2",{id:"11-on-the-map"},"1.1 On The Map"),(0,o.kt)("p",null,'In any given application, mobile, desktop, web or simply just an API - brokers usually reside at the "tail" of any app - that\'s because they are the last point of contact between our custom code and the outside world.'),(0,o.kt)("p",null,"Whether the outside world in this instance is just simply a local storage in memory, or an entirely independent system that resides behind an API, they all have to reside behind the Brokers in any application."),(0,o.kt)("p",null,"In the following low-level architecture for a given API - Brokers reside between our business logic and the external resource:"),(0,o.kt)("br",null),(0,o.kt)("p",null,(0,o.kt)("img",{src:"https://user-images.githubusercontent.com/1453985/148864693-d432be6f-13b1-4def-af95-9c63af430802.png"})),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"12-characteristics"},"1.2 Characteristics"),(0,o.kt)("p",null,"There are few simple rules that govern the implementation of any broker - these rules are:"),(0,o.kt)("h3",{id:"120-implements-a-local-interface"},"1.2.0 Implements a Local Interface"),(0,o.kt)("p",null,"Brokers have to satisfy a local contract. they have to implement a local interface to allow the decoupling between their implementation and the services that consume them."),(0,o.kt)("p",null,"For instance, given that we have a local contract ",(0,o.kt)("inlineCode",{parentName:"p"},"IStorageBroker")," that requires an implementation for any given CRUD operation for a local model ",(0,o.kt)("inlineCode",{parentName:"p"},"Student")," - the contract operation would be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    public partial interface IStorageBroker\n    {\n        IQueryable<Student> SelectAllStudents();\n    }\n")),(0,o.kt)("p",null,"An implementation for a storage broker would be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    public partial class StorageBroker\n    {\n        public DbSet<Student> Students { get; set; }\n\n        public IQueryable<Student> SelectAllStudents()\n        {\n            using var broker = new StorageBroker(this.configuration);\n\n            return broker.Students;\n        }\n    }\n")),(0,o.kt)("p",null,"A local contract implementation can be replaced at any point in time from utilizing the Entity Framework as shows in the previous example, to using a completely different technology like Dapper, or an entirely different infrastructure like an Oracle or PostgreSQL database."),(0,o.kt)("h3",{id:"121-no-flow-control"},"1.2.1 No Flow Control"),(0,o.kt)("p",null,"Brokers should not have any form of flow-control such as if-statements, while-loops or switch cases - that's simply because flow-control code is considered to be business logic, and it fits better the services layer where business logic should reside not the brokers."),(0,o.kt)("p",null,"For instance, a broker method that retrieves a list of students from a database would look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    public IQueryable<Student> SelectAllStudents()\n    {\n        using var broker = new StorageBroker(this.configuration);\n\n        return broker.Students;\n    }\n")),(0,o.kt)("p",null,"A simple function that calls the native EntityFramework ",(0,o.kt)("inlineCode",{parentName:"p"},"DbSet<T>")," and return a local model like ",(0,o.kt)("inlineCode",{parentName:"p"},"Student"),". "),(0,o.kt)("h3",{id:"122-no-exception-handling"},"1.2.2 No Exception Handling"),(0,o.kt)("p",null,"Exception handling is somewhat a form of flow-control. Brokers are not supposed to handle any exceptions, but rather let the exception propagate to the broker-neighboring services where these exceptions are going to be properly mapped and localized."),(0,o.kt)("h3",{id:"123-own-their-configurations"},"1.2.3 Own Their Configurations"),(0,o.kt)("p",null,"Brokers are also required to handle their own configurations - they may have a dependency injection from a configuration object, to retrieve and setup the configurations for whichever external resource they are integrating with."),(0,o.kt)("p",null,"For instance, connection strings in database communications are required to be retrieved and passed in to the database client to establish a successful connection, as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'    public partial class StorageBroker : EFxceptionsContext, IStorageBroker\n    {\n        private readonly IConfiguration configuration;\n\n        public StorageBroker(IConfiguration configuration)\n        {\n            this.configuration = configuration;\n            this.Database.Migrate();\n        }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            string connectionString = this.configuration.GetConnectionString("DefaultConnection");\n            optionsBuilder.UseSqlServer(connectionString);\n        }\n    }\n')),(0,o.kt)("h3",{id:"124-natives-from-primitives"},"1.2.4 Natives from Primitives"),(0,o.kt)("p",null,"Brokers may construct an external model object based on primitive types passed from the broker-neighboring services."),(0,o.kt)("p",null,"For instance, in e-mail notifications broker, input parameters for a ",(0,o.kt)("inlineCode",{parentName:"p"},".Send(...)")," function for instance require the basic input parameters such as the subject, content or the address for instance, here's an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"    public async ValueTask SendMailAsync(List<string> recipients, string subject, string content)\n    {\n        Message message = BuildMessage(recipients, ccRecipients, subject, content);\n        await SendEmailMessageAsync(message);\n    }\n")),(0,o.kt)("p",null,"The primitive input parameters will ensure there are no strong dependencies between the broker-neighboring services and the external models.\nEven in situations where the broker is simply a point of integration between your application and an external RESTful API, it's very highly recommended that you build your own native models to reflect the same JSON object sent or returned from the API instead of relying on nuget libraries, dlls or shared projects to achieve the same goal."),(0,o.kt)("h3",{id:"125-naming-conventions"},"1.2.5 Naming Conventions"),(0,o.kt)("p",null,"The contracts for the brokers shall remain as generic as possible to indicate the overall functionality of a broker, for instance we say ",(0,o.kt)("inlineCode",{parentName:"p"},"IStorageBroker")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"ISqlStorageBroker")," to indicate a particular technology or infrastructure."),(0,o.kt)("p",null,"But in case of concrete implementations of brokers, it all depends on how many brokers you have providing similar functionality, in case of having a single storage broker, it might be more convenient to maintain the same name as the contract - in our case here a concrete implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"IStorageBroker")," would be ",(0,o.kt)("inlineCode",{parentName:"p"},"StorageBroker"),"."),(0,o.kt)("p",null,"However, if your application supports multiple queues, storages or e-mail service providers you might need to start be specifying the overall target of the component, for instance, an ",(0,o.kt)("inlineCode",{parentName:"p"},"IQueueBroker")," would have multiple implementations such as ",(0,o.kt)("inlineCode",{parentName:"p"},"NotificationQueueBroker")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"OrdersQueueBroker"),"."),(0,o.kt)("p",null,"But if the concrete implementations target the same model and business value, then a diversion to the technology might be more befitting in this case, for instance in the case of an ",(0,o.kt)("inlineCode",{parentName:"p"},"IStorageBroker")," two different concrete implementations would be ",(0,o.kt)("inlineCode",{parentName:"p"},"SqlStorageBroker")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"MongoStorageBroker")," this case is very possible in situations where environment costs are reduced in lower than production infrastructure for instance."),(0,o.kt)("h3",{id:"126-language"},"1.2.6 Language"),(0,o.kt)("p",null,"Brokers speak the language of the technologies they support.\nFor instance, in a storage broker, we say ",(0,o.kt)("inlineCode",{parentName:"p"},"SelectById")," to match the SQL ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," statement and in a queue broker we say ",(0,o.kt)("inlineCode",{parentName:"p"},"Enqueue")," to match the language."),(0,o.kt)("p",null,"If a broker is supporting an API endpoint, then it shall follow the RESTFul operations language, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"PUT"),", here's an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"\n    public async ValueTask<Student> PostStudentAsync(Student student) =>\n        await this.PostAsync(RelativeUrl, student);\n\n")),(0,o.kt)("h3",{id:"127-up--sideways"},"1.2.7 Up & Sideways"),(0,o.kt)("p",null,"Brokers cannot call other brokers. that's simply because brokers are the first point of abstraction, they require no additional abstractions and no additional dependencies other than a configuration access model."),(0,o.kt)("p",null,"Brokers can't also have services as dependencies as the flow in any given system shall come from the services to the brokers and not the other way around."),(0,o.kt)("p",null,"Even in situations where a microservice has to subscribe to a queue for instance, brokers will pass forward a listener method to process incoming events, but not call the services that provide the processing logic."),(0,o.kt)("p",null,"The general rule here then would be, that brokers can only be called by services, and they can only call external native dependencies."),(0,o.kt)("h2",{id:"13-organization"},"1.3 Organization"),(0,o.kt)("p",null,"Brokers that support multiple entities such as Storage brokers should leverage partial classes to break down the responsibilities per entities."),(0,o.kt)("p",null,"For instance, if we have a storage broker that provides all CRUD operations for both ",(0,o.kt)("inlineCode",{parentName:"p"},"Student")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Teacher")," models, then the organization of the files should be as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"IStorageBroker.cs",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"IStorageBroker.Students.cs"),(0,o.kt)("li",{parentName:"ul"},"IStorageBroker.Teachers.cs"))),(0,o.kt)("li",{parentName:"ul"},"StorageBroker.cs",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"StorageBroker.Students.cs"),(0,o.kt)("li",{parentName:"ul"},"StorageBroker.Teachers.cs")))),(0,o.kt)("p",null,"The main purpose of this particular organization leveraging partial classes is to separate the concern for each entity to even a finer level, which should make the maintainability of the software much higher."),(0,o.kt)("p",null,"But brokers files and folders naming convention strictly focuses on the plurality of the entities they support and the singularity for the overall resource being supported."),(0,o.kt)("p",null,"For instance, we say ",(0,o.kt)("inlineCode",{parentName:"p"},"IStorageBroker.Students.cs"),". and we also say ",(0,o.kt)("inlineCode",{parentName:"p"},"IEmailBroker")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"IQueueBroker.Notifications.cs")," - singular for the resource and plural entities."),(0,o.kt)("p",null,"The same concept applies to the folders or namespaces containing these brokers."),(0,o.kt)("p",null,"For instance, we say:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace OtripleS.Web.Api.Brokers.Storages\n{\n    ...\n}\n")),(0,o.kt)("p",null,"And we say:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace OtripleS.Web.Api.Brokers.Queues\n{\n    ...\n}\n")),(0,o.kt)("h2",{id:"14-broker-types"},"1.4 Broker Types"),(0,o.kt)("p",null,"In most of the applications built today, there are some common Brokers that are usually needed to get an enterprise application up and running - some of these Brokers are like Storage, Time, APIs, Logging and Queues."),(0,o.kt)("p",null,"Some of these brokers interact with existing resources on the system such as time to allow broker-neighboring services to treat time as a dependency and control how a particular service would behave based on the value of time at any point in the past, present or the future."),(0,o.kt)("h3",{id:"140-entity-brokers"},"1.4.0 Entity Brokers"),(0,o.kt)("p",null,"Entity brokers are the brokers providing integration points with external resources that the system needs to fulfill a business requirements."),(0,o.kt)("p",null,"For instance, entity brokers are brokers that integrate with storage, providing capabilities to store or retrieve records from a database."),(0,o.kt)("p",null,"Entity brokers are also like queue brokers, providing a point of integration to push messages to a queue for other services to consume and process to fulfill their business logic."),(0,o.kt)("p",null,"Entity brokers can only be called by broker-neighboring services, simply because they require a level of validation that needs to be performed on the data they receive or provide before proceeding any further."),(0,o.kt)("h3",{id:"141-support-brokers"},"1.4.1 Support Brokers"),(0,o.kt)("p",null,"Support brokers are general purpose brokers, they provide a functionality to support services but they have no characteristic that makes them different from one system or another."),(0,o.kt)("p",null,"A good example of support brokers is the ",(0,o.kt)("inlineCode",{parentName:"p"},"DateTimeBroker")," - a broker made specifically to abstract away the business layer strong dependency on the system date time."),(0,o.kt)("p",null,"Time brokers don't really target any specific entity, and they are almost the same across many systems out there."),(0,o.kt)("p",null,"Another example of support brokers is the ",(0,o.kt)("inlineCode",{parentName:"p"},"LoggingBroker")," - they provide data to logging and monitoring systems to enable the system's engineers to visualize the overall flow of data across the system, and be notified in case any issues occur."),(0,o.kt)("p",null,"Unlike Entity Brokers - support brokers may be called across the entire business layer, they may be called on foundation, processing, orchestration, coordination, management or aggregation services. that's because logging brokers are required as a supporting component in the system to provide all the capabilities needed for services to log their errors or calculate a date or any other supporting functionality."),(0,o.kt)("p",null,"You can find real-world examples of brokers in the OtripleS project ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/hassanhabib/OtripleS/tree/master/OtripleS.Web.Api/Brokers"},"here"),"."),(0,o.kt)("h2",{id:"15-implementation"},"1.5 Implementation"),(0,o.kt)("p",null,"Here's a real-life implementation of a full storage broker for all CRUD operations for ",(0,o.kt)("inlineCode",{parentName:"p"},"Student")," entity:"),(0,o.kt)("h6",{id:"for-istoragebrokercs"},"For IStorageBroker.cs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace OtripleS.Web.Api.Brokers.Storage\n{\n    public partial interface IStorageBroker\n    {\n    }\n}\n\n")),(0,o.kt)("h6",{id:"for-storagebrokercs"},"For StorageBroker.cs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing EFxceptions.Identity;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing OtripleS.Web.Api.Models.Users;\n\nnamespace OtripleS.Web.Api.Brokers.Storage\n{\n    public partial class StorageBroker : EFxceptionsContext, IStorageBroker\n    {\n        private readonly IConfiguration configuration;\n\n        public StorageBroker(IConfiguration configuration)\n        {\n            this.configuration = configuration;\n            this.Database.Migrate();\n        }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            string connectionString = this.configuration.GetConnectionString("DefaultConnection");\n            optionsBuilder.UseSqlServer(connectionString);\n        }\n    }\n}\n')),(0,o.kt)("h6",{id:"for-istoragebrokerstudentscs"},"For IStorageBroker.Students.cs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing OtripleS.Web.Api.Models.Students;\n\nnamespace OtripleS.Web.Api.Brokers.Storage\n{\n    public partial interface IStorageBroker\n    {\n        public ValueTask<Student> InsertStudentAsync(Student student);\n        public IQueryable<Student> SelectAllStudents();\n        public ValueTask<Student> SelectStudentByIdAsync(Guid studentId);\n        public ValueTask<Student> UpdateStudentAsync(Student student);\n        public ValueTask<Student> DeleteStudentAsync(Student student);\n    }\n}\n")),(0,o.kt)("h6",{id:"for-storagebrokerstudentscs"},"For StorageBroker.Students.cs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.ChangeTracking;\nusing OtripleS.Web.Api.Models.Students;\n\nnamespace OtripleS.Web.Api.Brokers.Storage\n{\n    public partial class StorageBroker\n    {\n        public DbSet<Student> Students { get; set; }\n\n        public async ValueTask<Student> InsertStudentAsync(Student student)\n        {\n            using var broker = new StorageBroker(this.configuration);\n\n            EntityEntry<Student> studentEntityEntry =\n                await broker.Students.AddAsync(entity: student);\n\n            await broker.SaveChangesAsync();\n\n            return studentEntityEntry.Entity;\n        }\n\n        public IQueryable<Student> SelectAllStudents()\n        {\n            using var broker = new StorageBroker(this.configuration);\n\n            return broker.Students;\n        }\n\n        public async ValueTask<Student> SelectStudentByIdAsync(Guid studentId)\n        {\n            using var broker = new StorageBroker(this.configuration);\n\n            broker.ChangeTracker.QueryTrackingBehavior =\n                QueryTrackingBehavior.NoTracking;\n\n            return await broker.Students.FindAsync(studentId);\n        }\n\n        public async ValueTask<Student> UpdateStudentAsync(Student student)\n        {\n            using var broker = new StorageBroker(this.configuration);\n\n            EntityEntry<Student> studentEntityEntry =\n                broker.Students.Update(entity: student);\n\n            await broker.SaveChangesAsync();\n\n            return studentEntityEntry.Entity;\n        }\n\n        public async ValueTask<Student> DeleteStudentAsync(Student student)\n        {\n            using var broker = new StorageBroker(this.configuration);\n\n            EntityEntry<Student> studentEntityEntry =\n                broker.Students.Remove(entity: student);\n                \n            await broker.SaveChangesAsync();\n\n            return studentEntityEntry.Entity;\n        }\n    }\n}\n")),(0,o.kt)("h2",{id:"16-summary"},"1.6 Summary"),(0,o.kt)("p",null,"Brokers are the first layer of abstraction between your business logic and the outside world, but they are not the only layer of abstraction. simply because there will still be few native models that leak through your brokers to your broker-neighboring services which is natural to avoid doing any mappings outside of the realm of logic, in our case here the foundation services."),(0,o.kt)("p",null,"For instance, in a storage broker, regardless what ORM you are using, some native exceptions from your ORM (EntityFramework for instance) will occur, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"DbUpdateException")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"SqlException")," - in that case we need another layer of abstraction to play the role of a mapper between these exceptions and our core logic to convert them into local exception models. "),(0,o.kt)("p",null,"This responsibility lies in the hands of the broker-neighboring services, I also call them foundation services, these services are the last point of abstraction before your core logic, in which everything becomes nothing but local models and contracts."),(0,o.kt)("h2",{id:"17-faqs"},"1.7 FAQs"),(0,o.kt)("p",null,"During the course of time, there have been some common questions that arose by the engineers that I had the opportunity to work with throughout my career - since some of these questions reoccurred on several occasions, I thought it might be useful to aggregate all of them in here for everyone to learn about some other perspectives around brokers."),(0,o.kt)("h4",{id:"170-is-the-brokers-pattern-the-same-as-the-repository-pattern"},"1.7.0 Is the brokers pattern the same as the repository pattern?"),(0,o.kt)("p",null,"Not exactly, at least from an operational standpoint, brokers seems to be more generic than repositories."),(0,o.kt)("p",null,"Repositories usually target storage-like operations, mainly towards databases. but brokers can be an integration point with any external dependency such as e-mail services, queues, other APIs and such."),(0,o.kt)("p",null,"A more similar pattern for brokers is the Unit of Work pattern, it mainly focuses on the overall operation without having to tie the definition or the name with any particular operation."),(0,o.kt)("p",null,"All of these patterns in general try to achieve the same SOLID principles goal, which is the separation of concern, dependency injection and single responsibility."),(0,o.kt)("p",null,"But because SOLID are principles and not exact guidelines, it's expected to see all different kinds of implementations and patterns to achieve that principle."),(0,o.kt)("h4",{id:"171-why-cant-the-brokers-implement-a-contract-for-methods-that-return-an-interface-instead-of-a-concrete-model"},"1.7.1 Why can't the brokers implement a contract for methods that return an interface instead of a concrete model?"),(0,o.kt)("p",null,"That would be an ideal situation, but that would also require brokers to do a conversion or mapping between the native models returned from the external resource SDKs or APIs and the internal model that adheres to the local contract."),(0,o.kt)("p",null,"Doing that on the broker level will require pushing business logic into that realm, which is outside of the purpose of that component completely."),(0,o.kt)("p",null,"Brokers do not get unit tested because they have no business logic in them, they may be a part of an acceptance or an integration test, but certainly not a part of unit level tests - simply because they don't contain any business logic in them. We define business logic code as any intended sequential, selective or iteration code."),(0,o.kt)("h4",{id:"172-if-brokers-were-truly-a-layer-of-abstraction-from-the-business-logic-how-come-we-allow-external-exceptions-to-leak-through-them-onto-the-services-layer"},"1.7.2 If brokers were truly a layer of abstraction from the business logic, how come we allow external exceptions to leak through them onto the services layer?"),(0,o.kt)("p",null,"Brokers are only the ",(0,o.kt)("em",{parentName:"p"},"the first")," layer of abstraction, but not the only one - the broker neighboring services are responsible for converting the native exceptions occurring from a broker into a more local exception model that can be handled and processed internally within the business logic realm."),(0,o.kt)("p",null,"Full pure local code starts to occur on the processing, orchestration, coordination and aggregation layers where all the exceptions, all the returned models and all operations are localized to the system."),(0,o.kt)("h4",{id:"173-why-do-we-use-partial-classes-for-brokers-who-handle-multiple-entities"},"1.7.3 Why do we use partial classes for brokers who handle multiple entities?"),(0,o.kt)("p",null,"Since brokers are required to own their own configurations, it made more sense to partialize when possible to avoid reconfiguring every storage broker for each entity."),(0,o.kt)("p",null,"This is a feature in C# specifically as a language, but it should be possible to implement through inheritance in other programming languages."),(0,o.kt)("h4",{id:"174-are-brokers-the-same-as-providers-provider-pattern"},"1.7.4 Are brokers the same as providers (Provider Pattern)?"),(0,o.kt)("p",null,"No. Providers blur the line between services (business logic) and brokers (integration layer) - brokers are targeting particular components within the system that are disposable. Providers seem to include more than just that."),(0,o.kt)("p",null,"[*][Implementing Abstract Components (Brokers)]","(",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=6NlgSskQXSo"},"https://www.youtube.com/watch?v=6NlgSskQXSo"),")"),(0,o.kt)("p",null,"[*][Implementing Abstract Components (Part 2)]","(",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=d1cqEKMBmno"},"https://www.youtube.com/watch?v=d1cqEKMBmno"),")"),(0,o.kt)("p",null,"[*][Generating Model Migrations w/ EntityFramework]","(",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=6sD5zz9BuOk"},"https://www.youtube.com/watch?v=6sD5zz9BuOk"),")"))}p.isMDXComponent=!0}}]);