"use strict";(self.webpackChunkthe_standard=self.webpackChunkthe_standard||[]).push([[8844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=i,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?o.createElement(m,a(a({ref:t},d),{},{components:n})):o.createElement(m,a({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},818:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const r={},a="0.2 Principles",l={unversionedId:"Introduction/0.2 Principles",id:"Introduction/0.2 Principles",title:"0.2 Principles",description:"In this chapter, we will explore the principles of The Standard. These principles apply to all components in Standard-compliant system. Whether these components are brokers, services or exposers.",source:"@site/docs/0. Introduction/0.2 Principles.md",sourceDirName:"0. Introduction",slug:"/Introduction/0.2 Principles",permalink:"/The-Standard/docs/Introduction/0.2 Principles",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/0. Introduction/0.2 Principles.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"0.1 Purposing, Modeling and Simulation",permalink:"/The-Standard/docs/Introduction/0.1 Purposing, Modeling & Simulation"},next:{title:"1 Brokers",permalink:"/The-Standard/docs/Brokers/"}},s={},c=[{value:"0.2.0 People-First",id:"020-people-first",level:2},{value:"0.2.0.0 Simplicity",id:"0200-simplicity",level:3},{value:"0.2.0.0.0 Excessive Inheritance",id:"02000-excessive-inheritance",level:4},{value:"0.2.0.0.1 Entanglement",id:"02001-entanglement",level:4},{value:"0.2.0.0.1.0 Horizontal Entanglement",id:"020010-horizontal-entanglement",level:5},{value:"0.2.0.0.1.1 Vertical Entanglement",id:"020011-vertical-entanglement",level:5},{value:"0.2.0.0.2 Autonomous Components",id:"02002-autonomous-components",level:4},{value:"0.2.0.0.2.0 No Magic",id:"020020-no-magic",level:5},{value:"0.2.1 Rewritability",id:"021-rewritability",level:2},{value:"0.2.2 Mono-Micro",id:"022-mono-micro",level:2},{value:"0.2.3 Level 0",id:"023-level-0",level:2},{value:"0.2.4 Open Code",id:"024-open-code",level:2},{value:"0.2.5 Airplane Mode (Cloud-Foreign)",id:"025-airplane-mode-cloud-foreign",level:2},{value:"0.2.6 No Toasters",id:"026-no-toasters",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"02-principles"},"0.2 Principles"),(0,i.kt)("p",null,"In this chapter, we will explore the principles of The Standard. These principles apply to all components in Standard-compliant system. Whether these components are brokers, services or exposers."),(0,i.kt)("h2",{id:"020-people-first"},"0.2.0 People-First"),(0,i.kt)("p",null,"The main idea of this principle is to build and design Standard-compliant systems with people in mind. Not just the people who are going to utilize the system but also the people who are going to be maintaining and evolving it."),(0,i.kt)("p",null,"In order for a system to follow the people-first principle it must honor simplicity over complexity. Simplicity leads to rewritability. It also leads to designing monolithic systems that are built with modulus mindset to allow a true fractability in the overall pattern of the system."),(0,i.kt)("p",null,"The Standard also enforces the principles of measuring advanced engineering concepts against the understanding of mainstream engineers. New engineers in the industry are the leaders of tomorrow. If they are not buying in on any system they'll eventually give-up and rewrite it over and over again."),(0,i.kt)("h3",{id:"0200-simplicity"},"0.2.0.0 Simplicity"),(0,i.kt)("p",null,"Code written according to The Standard has to be simple. There are measures to ensure this simplicity takes place, these measures are as follows:"),(0,i.kt)("h4",{id:"02000-excessive-inheritance"},"0.2.0.0.0 Excessive Inheritance"),(0,i.kt)("p",null,"Any software written according to The Standard shall not have more than one level of inheritance. Over one level of inheritance will be considered excessive and prohibited. Except in cases of versioning for the vertical scaling of flows. Excessive inheritance has proven itself over the years to be a source of confusion and difficulty in terms of readability and maintainability."),(0,i.kt)("h4",{id:"02001-entanglement"},"0.2.0.0.1 Entanglement"),(0,i.kt)("h5",{id:"020010-horizontal-entanglement"},"0.2.0.0.1.0 Horizontal Entanglement"),(0,i.kt)("p",null,'Building "common" components in every system with the promise to simplify the development process is another prohibited practice in Standard-compliant systems. This practices manifests itself in components with names like ',(0,i.kt)("inlineCode",{parentName:"p"},"Utils"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Commons")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Helpers"),". These terminologies and what they imply in terms of false promised simplifications are not allowed. Any system built according to The Standard should be comprised of Brokers, Services or Exposers, nothing more or less."),(0,i.kt)("p",null,"Another example of horizontal entanglements are shared models across multiple independent flows - sharing exceptions, validation rules or any other form of entanglement across multiple flows."),(0,i.kt)("br",null),(0,i.kt)("div",null,(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/1453985/169941573-fe71c80a-ba03-449c-b690-913516176b01.png"})),(0,i.kt)("br",null),(0,i.kt)("h5",{id:"020011-vertical-entanglement"},"0.2.0.0.1.1 Vertical Entanglement"),(0,i.kt)("p",null,"This principle also applies to scenarios where base components are used. Unless these base components are native or external they will not be allowed in a Standard-compliant system. Local base components create a vertical level of entanglement that harms the maintainability and readability of code. Vertical entanglements are just as harmful as ",(0,i.kt)("inlineCode",{parentName:"p"},"Commons")," components that create single points of failure across any system."),(0,i.kt)("p",null,"Entanglements (vertical or horizontal) also prevent engineers in any system (especially newcomers) from fully understanding the depth of the system and fully own it's functionality. They also prevent engineers from having the opportunity to build end-to-end flows when half of the functionality is presumably componentized for the sake of development expedition and simplicity. "),(0,i.kt)("br",null),(0,i.kt)("div",null,(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/1453985/169942070-9336f6fd-b1bb-48e0-ac83-d7f5e7a13d38.png"})),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"02002-autonomous-components"},"0.2.0.0.2 Autonomous Components"),(0,i.kt)("p",null,"This principle favors duplication over presumed simplification via code entanglement. Every component in every system should be self-sufficient. Every component implements it's own validations, tooling and utilities in one of it's dimensions with no hard-dependency on any other external components except through dependency injection."),(0,i.kt)("p",null,"Autonomous components will open up the opportunity for every single engineer on every team to fully own every dependency and tool their component may need to fulfil it's purpose. This may cause a bit of duplication in some of the code for the sake of opening an equal opportunity for every developer to fully learn how to build and evolve a component."),(0,i.kt)("h5",{id:"020020-no-magic"},"0.2.0.0.2.0 No Magic"),(0,i.kt)("p",null,"Autonomous components put all their routines up in front of the engineer. No hidden routines, shared libraries or magical extensions that require chasing references once an inevitable split of the big monolith begins to occur."),(0,i.kt)("p",null,"We will treat Objects the way they are in nature. multi-dimensional components that are self-containerized like atoms in nature. These components perform their own validations, exception handling, tracing, security, localization and everything else in between."),(0,i.kt)("br",null),(0,i.kt)("div",null,(0,i.kt)("img",{src:"https://user-images.githubusercontent.com/1453985/169712032-3184e22a-d91f-4baa-a0f2-657de294220b.png"})),(0,i.kt)("br",null),(0,i.kt)("p",null,"Components built according to The Standard strictly adheres to the idea of ",(0,i.kt)("em",{parentName:"p"},"What You See Is What You Get")," (WYSIWYG) - everything concerning the components will be on the component itself."),(0,i.kt)("h2",{id:"021-rewritability"},"0.2.1 Rewritability"),(0,i.kt)("p",null,"Every system should be developed with the rewritability principle in mind. The principle dictates that our assumptions in the systems we develop has the high potentiality of being reexamined and probably reconsidered. Every system out there should be easily rewritable as a measure of adherence to a forever growing and changing business requirements."),(0,i.kt)("p",null,"Rewritable code is code that is easy to understand, modify and fully rewrite. Rewritable code is extremely modular and autonomous it encourages engineers to evolve it with the least amount of effort and risk possible."),(0,i.kt)("p",null,"Rewritable code doesn't play tricks on the reader. There are no hidden dependencies, injected routines at runtime nor unknown prerequisites. It should be plug-n-play - fork, clone, build and run all it's tests successfully with no issues. "),(0,i.kt)("h2",{id:"022-mono-micro"},"0.2.2 Mono-Micro"),(0,i.kt)("p",null,"Building monolithic systems with modular mindset. Every flow should be built fully independent from other flows. For instance, we may build a monolithic system with microservice mindset. Which means that any flow can be extracted out of the system and turned into it's own microservice or lambda with the least amount of effort possible."),(0,i.kt)("p",null,"This principle goes hand in hand with the concept of autonomous components at a higher-level where flows are also autonomous from their neighboring flow and their hosting system."),(0,i.kt)("h2",{id:"023-level-0"},"0.2.3 Level 0"),(0,i.kt)("p",null,"Code must be understandable by an entry-level individual in the engineering craft. Our code base continues to live only based on how easy it is to understand by the mass majority of engineers in the industry. The mass-majority of engineers in our industry will always be those who are new in the craft."),(0,i.kt)("p",null,"Level 0 engineers are our measure of success. Their ability to understand our code is our reassurance that this very code will continue to live and evolve with the next generation of engineers."),(0,i.kt)("p",null,"This principle also mandates every engineer in the industry to cross-examine their code and pair with juniors in the field to see if they meet this principle."),(0,i.kt)("h2",{id:"024-open-code"},"0.2.4 Open Code"),(0,i.kt)("p",null,"Open code as a principle dictates that everything written according to The Standard should be commonly available to the public. Developing internal tools that is not accessible shall inevitably harm the engineering experience for those who are trying to evolve these very tools. This applies to internal artifactory practices, on-trial libraries and any other form of module development that doesn't allow every engineer everywhere to learn and evolve any given system."),(0,i.kt)("p",null,"This principle also recognizes that there are cases where code cannot be open or publicly available for certain purposes. And acknowledges that tooling, platforms and patterns that are not meant to be common should not be made available to the public in certain circumstances."),(0,i.kt)("h2",{id:"025-airplane-mode-cloud-foreign"},"0.2.5 Airplane Mode (Cloud-Foreign)"),(0,i.kt)("p",null,"The Standard enforces the idea of airplane mode. Where engineers can stand-up their entire infrastructure on their local machine without needing or having any form of network connection. This principle goes heavily against principles such as Cloud-Native applications where a given system cannot stand and run without cloud infrastructure."),(0,i.kt)("p",null,"The Standard also encourages it's adapters to develop the proper tooling to bridge the gap between cloud infrastructural components and local components such as queues, event hubs and any other tools to make it easily testable and modifiable."),(0,i.kt)("h2",{id:"026-no-toasters"},"0.2.6 No Toasters"),(0,i.kt)("p",null,"The Standard shall be taught man to man not machine to man. There should be no stylecops or analyzers implemented to force people into following The Standard. It should be driven by passion in the heart and conviction in the mind. The Standard should be taught by people to people. It's meant to foster an engineering culture of open discussions, conviction and understanding."))}p.isMDXComponent=!0}}]);