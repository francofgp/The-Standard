"use strict";(self.webpackChunkthe_standard=self.webpackChunkthe_standard||[]).push([[2436],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),p=r,m=c["".concat(l,".").concat(p)]||c[p]||h[p]||s;return n?o.createElement(m,a(a({ref:t},u),{},{components:n})):o.createElement(m,a({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var d=2;d<s;d++)a[d]=n[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},258:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const s={},a="0.0 The Theory",i={unversionedId:"Introduction/0.0 The Theory",id:"Introduction/0.0 The Theory",title:"0.0 The Theory",description:"0.0.0 Introduction",source:"@site/docs/0. Introduction/0.0 The Theory.md",sourceDirName:"0. Introduction",slug:"/Introduction/0.0 The Theory",permalink:"/The-Standard/docs/Introduction/0.0 The Theory",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/0. Introduction/0.0 The Theory.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"0 Introduction",permalink:"/The-Standard/docs/Introduction/"},next:{title:"0.1 Purposing, Modeling and Simulation",permalink:"/The-Standard/docs/Introduction/0.1 Purposing, Modeling & Simulation"}},l={},d=[{value:"0.0.0 Introduction",id:"000-introduction",level:2},{value:"0.0.1 Finding Answers",id:"001-finding-answers",level:2},{value:"0.0.2 Tri-Nature",id:"002-tri-nature",level:2},{value:"0.0.2.0 Purpose",id:"0020-purpose",level:3},{value:"0.0.2.1 Dependency",id:"0021-dependency",level:3},{value:"0.0.2.2 Exposure",id:"0022-exposure",level:3},{value:"0.0.3 Everything is Connected",id:"003-everything-is-connected",level:3},{value:"0.0.4 Fractal Pattern",id:"004-fractal-pattern",level:3},{value:"0.0.5 Systems Design &amp; Architecture",id:"005-systems-design--architecture",level:3},{value:"0.0.6 Conclusion",id:"006-conclusion",level:3}],u={toc:d};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"00-the-theory"},"0.0 The Theory"),(0,r.kt)("h2",{id:"000-introduction"},"0.0.0 Introduction"),(0,r.kt)("p",null,"When designing any system, it is of utmost importance for the designer to backup their design with a certain theory. Theories play a massive role in ensuring the purposes, models and simulations of their design are cohesive and extensible within a certain domain."),(0,r.kt)("p",null,"Any system out there regardless of how chaotic it may seem is mandatorily influenced by at least one theory either coined by the designer or inherited from previous designers or their systems."),(0,r.kt)("p",null,"Regardless of what or who the influencer may be, it is important for the designer to fully understand the theory they follow or it will negatively impact their future decisions in terms of extending their design to keep up with a forever changing and expanding universe."),(0,r.kt)("p",null,"I have realized early on that the simpler any theory is, the easier it becomes for other designers to adapt the theory and extend it's reach beyond the original designer's dreams. A universe built on top of simpler patterns can make it a lot easier for those who marvel at its beauty to better understand it and appreciate it much more than those who just give-in to the fact that it's complex beyond their comprehension."),(0,r.kt)("p",null,"A theory about the universe could make life much more purposeful, enriched with all sorts of tales about survival, evolution and fulfillment."),(0,r.kt)("h2",{id:"001-finding-answers"},"0.0.1 Finding Answers"),(0,r.kt)("p",null,"Early on in my life, I struggled with schooling. Nothing that was taught made any sense to me. It seemed that everyone at school was more concerned with memorizing and regurgitating what they've memorized during their exam than truly understanding consciously what was being taught and question it's origins and validate it's purposes."),(0,r.kt)("p",null,"I realized at an earlier age that I needed some magical equation to help me distinguish between what's true and what's not. What's right and wrong. What's driven by a purpose and what's an imitation for those who have true purposes."),(0,r.kt)("p",null,"So, I started my search in coming up with a theory that can explain the world to me. I was named all kinds of names during my schooling years. But I didn't mind much of that because my heart, mind and body were fully invested into finding the answer to everything."),(0,r.kt)("p",null,"When looking for answers, it's important to keep your heart and mind open for all the options. Don't let any social or traditional structures limit your mind from seeking the truth about the universe and embracing the answers from everywhere."),(0,r.kt)("p",null,"After years and years of search, I settled on a theory that made it simple for a simple person like myself to understand everything. I called it The Tri-Nature of Everything."),(0,r.kt)("h2",{id:"002-tri-nature"},"0.0.2 Tri-Nature"),(0,r.kt)("p",null,"The Tri-Nature theory states that everything in this world is comprised of 3 main categories. Dependencies, purposes and exposures. Each one of these components plays a crucial role towards the survival of its system, its evolution and fulfillment."),(0,r.kt)("p",null,"Let's talk about these components here."),(0,r.kt)("h3",{id:"0020-purpose"},"0.0.2.0 Purpose"),(0,r.kt)("p",null,"Everything around us has a purpose. It was created and designed with a certain reason in the mind of it's creator. We design cars to take us from point A to point B. We design cups for drinking, plates for eating and shoes for walking. Everything in existence has a core purpose the governs it's design and legitimatizes it's existence."),(0,r.kt)("h3",{id:"0021-dependency"},"0.0.2.1 Dependency"),(0,r.kt)("p",null,"But every system out there must have a dependency in one form or another in order. For instance, we as biological systems rely on food and water to survive. Cars rely on oil or electricity. Computer systems rely on power and electricity and so on. Every system no matter how small or big it may be, and regardless of it's impact and importance must have a dependency of some kind."),(0,r.kt)("h3",{id:"0022-exposure"},"0.0.2.2 Exposure"),(0,r.kt)("p",null,"But in order for a dependency to become a dependency it needs to expose itself somehow for other systems to rely on it. For instance, power outlets are an exposure layer for power sources to allow other systems to plug in and consume its services. Gas stations are exposure layers for oil tanks buried underground to store that oil. And so on with every system out there it needs to expose itself to allow other systems to integrate with it and consume its capabilities."),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{width:"50%",src:"https://user-images.githubusercontent.com/1453985/166178078-c1ef6cb5-a78c-4496-9100-b6c9c31d273c.png"})),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"003-everything-is-connected"},"0.0.3 Everything is Connected"),(0,r.kt)("p",null,"In the larger scheme of things, all systems out there are connected to one another. A simple example of this is the food chain in nature. The sun is a dependency for the grass to grow, grasshoppers are consumers of grass while frogs feed on grasshoppers then snakes would feed off of frogs and so on."),(0,r.kt)("p",null,"Every single member in the food chain is a system that has dependencies, purposes and exposure."),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{width:"75%",src:"https://user-images.githubusercontent.com/1453985/166204227-b07470e3-56aa-46a7-a2e4-bccda9024af0.png"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"Since computer systems are nothing but a reflection of our reality. These systems integrations represent a chain of infinite dependencies each one of these systems relies on one or more systems to fulfill its purpose. A simple mobile application could rely on a backend system to persist it's data. But the backend system relies on cloud-based system to store the data. And the cloud based system relies on file system to perform basic persistance operations and so on."),(0,r.kt)("h3",{id:"004-fractal-pattern"},"0.0.4 Fractal Pattern"),(0,r.kt)("p",null,"The Tri-Nature pattern could also be perceived at the lowest scale of any system as well as the highest scale. That's what we call a fractal pattern. Every system out there is infinity comprised of three components each one of them has three components as well and so on."),(0,r.kt)("p",null,"For instance, the smallest known component in the universe are the quarks within neutron within an atom. these quarks are three components, two down quarks and one up quark. but if you zoom out slightly you would see the larger system where these quarks reside is also comprised of three components which are the electrons, protons and neutrons."),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{width:"75%",src:"https://user-images.githubusercontent.com/1453985/166233617-87b51836-010a-4744-9ad0-194dada5a5b7.png"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"If we zoom far out from the sub-atomic level to the solar system, the pattern continues to repeat itself at a massive scale. Our solar system is comprised of a sun, planets and moons. and they fall exactly within the dependency purposing and exposure patterns as the components in the sub-atomic level as follows:"),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{width:"75%",src:"https://user-images.githubusercontent.com/1453985/166234576-18613bdd-e972-4562-8761-15cf8ea875cf.png"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"And if we zoom further out at scale, we find out that galaxies are made out of dust, gas and dark matter."),(0,r.kt)("p",null,"The Tri-Nature pattern continues to repeat itself into every aspect of our lives. Every component in our universe from the smallest sub-atomic parts to a massive scale galaxies and solar systems the follow the same rule."),(0,r.kt)("h3",{id:"005-systems-design--architecture"},"0.0.5 Systems Design & Architecture"),(0,r.kt)("p",null,"It is now evident that a good theory that we can follow to design systems has been discovered! We can now develop every single component in our software with accordance to The Tri-Nature of Everything. The rules and guidelines that govern designing software according to The Theory is called The Standard. It refers to the universal standard in designing systems in every matter."),(0,r.kt)("p",null,"The Standard dictates at the low-level architecture that every system out there should be comprised of brokers (dependencies) and services (purposes) and exposers (exposures)."),(0,r.kt)("p",null,"For instance, when designing a simple RESTful API, we may need to integrate with a database system, then validate incoming data based on certain business rules then expose these capabilities to the outside world for the API consumers to be able to integrate with it."),(0,r.kt)("p",null,"According to The Standard that system would look like this:"),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{width:"75%",src:"https://user-images.githubusercontent.com/1453985/166236209-362ae38d-9455-4ae2-b5d5-a10c92bf0b46.png"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"When digging deeper into any of these components, the same pattern would repeat itself. For instance, a service is comprised of validation components, processing components and integration components. And then if we zoom in a bit further, these very validation components are comprised of three finer components which are the structural validations, the logical validations and external validations. The pattern continues to go on and on to the lowest level of our design as shown here:"),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{width:"75%",src:"https://user-images.githubusercontent.com/1453985/166237622-ff4dc0e8-2513-4d7e-834d-ef15caee3d30.png"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"The same pattern also applies to larger systems if we zoom out of the one system realm into distributed modern systems such as microservice architectures - the same pattern should apply as follows:"),(0,r.kt)("br",null),(0,r.kt)("div",null,(0,r.kt)("img",{width:"65%",src:"https://user-images.githubusercontent.com/1453985/166238298-f3f0c040-d57a-4a56-a6bc-13c564aef5e1.png"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"In a distributed system, some services play the role of ambassadors to external or local resources which is the equivalent of a broker component at the service level. But then a purpose-driven component must come into play to orchestrate business flows by combining one or many primitive resource-consumption operations from these ambassador services. The final part which is the exposure layer, a thin gatekeeper layer that becomes the first point of contact between the outside world and your microservice architecture."),(0,r.kt)("p",null,"The same pattern of tri-nature will continue to repeat itself across several systems may it be large across multiple organizations or small within one single service."),(0,r.kt)("h3",{id:"006-conclusion"},"0.0.6 Conclusion"),(0,r.kt)("p",null,"In conclusion, The Tri-Nature of Everything is the theory that powers up The Standard. Every single aspect in the rules and guidelines of The Standard are heavily influenced by The Tri-Nature theory. But it's important to understand that the theory goes well beyond designing some software system. It can apply to management styles, writing books, making meals, establishing relationships and every other aspect of our lives which goes beyond the purpose of The Standard here."),(0,r.kt)("p",null,"It is quite evident now after so many years of research and experimentation with the Tri-Nature theory that it works! It helps simplify some of the most complex systems out there. It plays well with our intuition as human beings, and makes it even simpler for automatons in the future to expedite our development processes of software and hardware and everything else in between."),(0,r.kt)("p",null,"Finally, The Standard is an ongoing journey of continuing to question The Tri-Nature theory. The further we go into uncharted waters in terms of business domains the more we discover some new territories where my theory still stands. Even for the most chaotic systems out there the theory applies in certain ways even if the components of said systems didn't quite adhere to The Standard form of distinction."))}h.isMDXComponent=!0}}]);